name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect solution under src/
        id: find_sln
        shell: pwsh
        run: |
          $sln = Get-ChildItem -Path "src" -Filter *.sln -Recurse | Select-Object -First 1
          if (-not $sln) {
            Write-Warning "No se encontró ninguna .sln bajo 'src/'. Se omitirá el build."
            "SHOULD_BUILD=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            "SHOULD_BUILD=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "SLN_PATH=$($sln.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "Solución detectada: $($sln.FullName)"
          }

      - name: Setup MSBuild (VS 2022)
        if: steps.find_sln.outputs.SHOULD_BUILD == 'true'
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Setup NuGet
        if: steps.find_sln.outputs.SHOULD_BUILD == 'true'
        uses: NuGet/setup-nuget@v2

      - name: NuGet cache
        if: steps.find_sln.outputs.SHOULD_BUILD == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            **/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Create temporary App.config if missing
        if: steps.find_sln.outputs.SHOULD_BUILD == 'true'
        shell: pwsh
        run: >
          $csprojs = Get-ChildItem -Path "src" -Filter *.csproj -Recurse;
          foreach ($p in $csprojs) {
            $projDir = Split-Path $p.FullName;
            $appConfig = Join-Path $projDir "App.config";
            if (-not (Test-Path $appConfig)) {
              Write-Host ">> Creando App.config temporal en $projDir";
              $xmlLines = @(
                '<?xml version="1.0" encoding="utf-8" ?>',
                '<configuration>',
                '  <startup>',
                '    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />',
                '  </startup>',
                '  <appSettings>',
                '    <add key="ActiveDb" value="Docker"/>',
                '    <add key="AppTitulo" value="SuiteMDI-EduSQL"/>',
                '  </appSettings>',
                '  <connectionStrings>',
                '    <add name="SqlDocker"',
                '         connectionString="Server=127.0.0.1,2333;Database=Ejemplo_SIN_Encripcion;User ID=sa;Password=DummyPassword!;TrustServerCertificate=True;MultipleActiveResultSets=True;"',
                '         providerName="System.Data.SqlClient" />',
                '  </connectionStrings>',
                '</configuration>'
              );
              $xmlLines | Set-Content -Path $appConfig -Encoding UTF8;
            }
          }

      - name: Restore packages
        if: steps.find_sln.outputs.SHOULD_BUILD == 'true'
        shell: pwsh
        run: nuget restore "${{ steps.find_sln.outputs.SLN_PATH }}"

      - name: Build (Release)
        if: steps.find_sln.outputs.SHOULD_BUILD == 'true'
        shell: pwsh
        run: msbuild "${{ steps.find_sln.outputs.SLN_PATH }}" /t:Build /p:Configuration=Release /m /verbosity:minimal